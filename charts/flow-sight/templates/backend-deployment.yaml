apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "flow-sight.fullname" . }}-backend
  labels:
    {{- include "flow-sight.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      {{- include "flow-sight.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        {{- include "flow-sight.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
    spec:
      {{- if .Values.backend.initContainer.enabled }}
      initContainers:
      - name: wait-for-db
        image: "{{ .Values.backend.initContainer.image.repository }}:{{ .Values.backend.initContainer.image.tag }}"
        imagePullPolicy: {{ .Values.backend.initContainer.image.pullPolicy }}
        command:
        - sh
        - -c
        - |
          until pg_isready -h {{ .Values.backend.environment.DB_HOST }} -p {{ .Values.backend.database.port }} -U {{ .Values.backend.database.user }}; do
            echo "Waiting for database to be ready..."
            sleep 2
          done
          echo "Database is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.backend.secrets.externalName }}{{ .Values.backend.secrets.externalName }}{{ else if .Values.onePasswordItem.enabled }}{{ .Values.onePasswordItem.name }}{{ else }}{{ include "flow-sight.fullname" . }}-backend-secret{{ end }}
              key: DB_PASSWORD
      {{- end }}
      containers:
      - name: backend
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.backend.service.targetPort }}
          name: http
        env:
        - name: HOST
          value: {{ .Values.backend.environment.HOST }}
        - name: DB_HOST
          value: {{ .Values.backend.environment.DB_HOST }}
        - name: DB_PORT
          value: {{ .Values.backend.database.port | quote }}
        - name: DB_USER
          value: {{ .Values.backend.database.user }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.backend.secrets.externalName }}{{ .Values.backend.secrets.externalName }}{{ else if .Values.onePasswordItem.enabled }}{{ .Values.onePasswordItem.name }}{{ else }}{{ include "flow-sight.fullname" . }}-backend-secret{{ end }}
              key: DB_PASSWORD
        - name: DB_NAME
          value: {{ .Values.backend.database.name }}
        - name: DB_SSLMODE
          value: {{ .Values.backend.environment.DB_SSLMODE }}
        - name: ENV
          value: {{ .Values.backend.environment.ENV }}
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
